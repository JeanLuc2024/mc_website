<?php
/**
 * Booking Handler - Clean and Working Version
 * 
 * This handles booking form submissions and integrates with admin panel
 */

// Prevent any output before JSON
ob_start();
error_reporting(0);
ini_set('display_errors', 0);
ini_set('log_errors', 1);

// Set JSON header
header('Content-Type: application/json');
header('Access-Control-Allow-Origin: *');
header('Access-Control-Allow-Methods: POST');

// Clear any previous output
ob_clean();

// Ensure no warnings or notices are displayed
set_error_handler(function($errno, $errstr, $errfile, $errline) {
    error_log("Booking handler error (Level $errno): $errstr in $errfile on line $errline");
    return true;
});

// Response array
$response = [
    'success' => false,
    'message' => '',
    'booking_ref' => ''
];

try {
    // Check request method
    if ($_SERVER['REQUEST_METHOD'] !== 'POST') {
        $response['message'] = 'Invalid request method';
        echo json_encode($response);
        exit;
    }

    // Database configuration
    $host = 'localhost';
    $dbname = 'mc_website';
    $username = 'root';
    $password = '';

    // Connect to database
    $pdo = new PDO("mysql:host=$host;dbname=$dbname;charset=utf8mb4", $username, $password);
    $pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);

    // Create tables if they don't exist
    $createBookingsTable = "
    CREATE TABLE IF NOT EXISTS bookings (
        id INT AUTO_INCREMENT PRIMARY KEY,
        booking_ref VARCHAR(50) UNIQUE NOT NULL,
        name VARCHAR(255) NOT NULL,
        email VARCHAR(255) NOT NULL,
        phone VARCHAR(50) NOT NULL,
        event_date DATE NOT NULL,
        event_time TIME NOT NULL,
        event_type VARCHAR(100) NOT NULL,
        event_location TEXT NOT NULL,
        guests INT NOT NULL,
        package VARCHAR(100) DEFAULT NULL,
        message TEXT DEFAULT NULL,
        status ENUM('pending', 'confirmed', 'cancelled') DEFAULT 'pending',
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
    )";
    $pdo->exec($createBookingsTable);

    $createNotificationsTable = "
    CREATE TABLE IF NOT EXISTS notifications (
        id INT AUTO_INCREMENT PRIMARY KEY,
        type VARCHAR(50) NOT NULL,
        title VARCHAR(255) NOT NULL,
        message TEXT NOT NULL,
        data JSON DEFAULT NULL,
        is_read BOOLEAN DEFAULT FALSE,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    )";
    $pdo->exec($createNotificationsTable);

    // Get and validate form data
    $name = trim($_POST['name'] ?? '');
    $email = trim($_POST['email'] ?? '');
    $phone = trim($_POST['phone'] ?? '');
    $event_date = trim($_POST['event_date'] ?? '');
    $event_time = trim($_POST['event_time'] ?? '');
    $event_type = trim($_POST['event_type'] ?? '');
    $event_location = trim($_POST['event_location'] ?? '');
    $guests = intval($_POST['guests'] ?? 0);
    $package = trim($_POST['package'] ?? '');
    $message = trim($_POST['message'] ?? '');
    $terms = isset($_POST['terms']);

    // Validation
    if (empty($name) || empty($email) || empty($phone) || empty($event_date) || 
        empty($event_time) || empty($event_type) || empty($event_location) || 
        $guests <= 0 || !$terms) {
        $response['message'] = 'Please fill in all required fields and agree to terms and conditions';
        echo json_encode($response);
        exit;
    }

    // Email validation
    if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
        $response['message'] = 'Please enter a valid email address';
        echo json_encode($response);
        exit;
    }

    // Date validation
    if (strtotime($event_date) < strtotime(date('Y-m-d'))) {
        $response['message'] = 'Event date cannot be in the past';
        echo json_encode($response);
        exit;
    }

    // Generate unique booking reference
    $booking_ref = 'BK-' . date('ymd') . '-' . strtoupper(substr(md5(uniqid(rand(), true)), 0, 6));

    // Insert booking into database
    $sql = "INSERT INTO bookings (booking_ref, name, email, phone, event_date, event_time, 
            event_type, event_location, guests, package, message, status) 
            VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, 'pending')";

    $stmt = $pdo->prepare($sql);
    $result = $stmt->execute([
        $booking_ref, $name, $email, $phone, $event_date, $event_time,
        $event_type, $event_location, $guests, $package, $message
    ]);

    if (!$result) {
        $response['message'] = 'Failed to save booking. Please try again.';
        echo json_encode($response);
        exit;
    }

    // Create notification for admin panel
    $notificationData = [
        'booking_ref' => $booking_ref,
        'client_name' => $name,
        'client_email' => $email,
        'event_type' => $event_type,
        'event_date' => $event_date,
        'guests' => $guests
    ];

    $notifSql = "INSERT INTO notifications (type, title, message, data) VALUES (?, ?, ?, ?)";
    $notifStmt = $pdo->prepare($notifSql);
    $notifStmt->execute([
        'new_booking',
        'New Booking Received',
        "New booking from {$name} for {$event_type} on " . date('M j, Y', strtotime($event_date)),
        json_encode($notificationData)
    ]);

    // Include notification system and enhanced SMTP
    require_once __DIR__ . '/notification_system.php';
    require_once __DIR__ . '/enhanced_smtp.php';

    // Prepare booking data for email
    $booking_email_data = [
        'booking_ref' => $booking_ref,
        'name' => $name,
        'email' => $email,
        'phone' => $phone,
        'event_date' => $event_date,
        'event_time' => $event_time,
        'event_type' => $event_type,
        'event_location' => $event_location,
        'guests' => $guests,
        'package' => $package,
        'message' => $message
    ];

    // Log email attempt
    error_log("Attempting to send emails for booking: {$booking_ref}");

    // Email templates are now handled by email_config.php

    // Get the booking ID for notifications
    $booking_id = $pdo->lastInsertId();
    $booking_email_data['id'] = $booking_id;

    // Send confirmation email to client using enhanced SMTP
    $client_email_sent = sendBookingConfirmationSMTP($booking_email_data);

    // Send notification to admin using enhanced SMTP
    $admin_email_sent = sendAdminNotificationSMTP($booking_email_data);

    // Log email results
    error_log("Booking ID: {$booking_id} - Client email: " . ($client_email_sent ? 'SENT' : 'FAILED') . ", Admin email: " . ($admin_email_sent ? 'SENT' : 'FAILED'));

    // Success response
    $response['success'] = true;
    $response['message'] = "ðŸŽ‰ Thank you for your booking request! We will contact you shortly to confirm the details. Your booking reference is: {$booking_ref}";
    $response['booking_ref'] = $booking_ref;

} catch (PDOException $e) {
    $response['message'] = 'Database error occurred. Please try again later.';
    error_log('Booking DB Error: ' . $e->getMessage());
} catch (Exception $e) {
    $response['message'] = 'An unexpected error occurred. Please try again.';
    error_log('Booking Error: ' . $e->getMessage());
}

// Close database connection
if (isset($pdo)) {
    $pdo = null;
}

// Clean any remaining output buffer content
ob_clean();

// Output JSON response
echo json_encode($response);

// Ensure no additional output
ob_end_flush();
exit;
?>
